// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceFilesClient is the client API for ServiceFiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceFilesClient interface {
	ProvideFile(ctx context.Context, in *ProvideFileRequest, opts ...grpc.CallOption) (ServiceFiles_ProvideFileClient, error)
	StoreFile(ctx context.Context, opts ...grpc.CallOption) (ServiceFiles_StoreFileClient, error)
}

type serviceFilesClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceFilesClient(cc grpc.ClientConnInterface) ServiceFilesClient {
	return &serviceFilesClient{cc}
}

func (c *serviceFilesClient) ProvideFile(ctx context.Context, in *ProvideFileRequest, opts ...grpc.CallOption) (ServiceFiles_ProvideFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceFiles_ServiceDesc.Streams[0], "/proto.storage.ServiceFiles/ProvideFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceFilesProvideFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceFiles_ProvideFileClient interface {
	Recv() (*ProvideFileResponse, error)
	grpc.ClientStream
}

type serviceFilesProvideFileClient struct {
	grpc.ClientStream
}

func (x *serviceFilesProvideFileClient) Recv() (*ProvideFileResponse, error) {
	m := new(ProvideFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceFilesClient) StoreFile(ctx context.Context, opts ...grpc.CallOption) (ServiceFiles_StoreFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceFiles_ServiceDesc.Streams[1], "/proto.storage.ServiceFiles/StoreFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceFilesStoreFileClient{stream}
	return x, nil
}

type ServiceFiles_StoreFileClient interface {
	Send(*StoreFileRequest) error
	CloseAndRecv() (*StoreFileResponse, error)
	grpc.ClientStream
}

type serviceFilesStoreFileClient struct {
	grpc.ClientStream
}

func (x *serviceFilesStoreFileClient) Send(m *StoreFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceFilesStoreFileClient) CloseAndRecv() (*StoreFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceFilesServer is the server API for ServiceFiles service.
// All implementations must embed UnimplementedServiceFilesServer
// for forward compatibility
type ServiceFilesServer interface {
	ProvideFile(*ProvideFileRequest, ServiceFiles_ProvideFileServer) error
	StoreFile(ServiceFiles_StoreFileServer) error
	mustEmbedUnimplementedServiceFilesServer()
}

// UnimplementedServiceFilesServer must be embedded to have forward compatible implementations.
type UnimplementedServiceFilesServer struct {
}

func (UnimplementedServiceFilesServer) ProvideFile(*ProvideFileRequest, ServiceFiles_ProvideFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ProvideFile not implemented")
}
func (UnimplementedServiceFilesServer) StoreFile(ServiceFiles_StoreFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreFile not implemented")
}
func (UnimplementedServiceFilesServer) mustEmbedUnimplementedServiceFilesServer() {}

// UnsafeServiceFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceFilesServer will
// result in compilation errors.
type UnsafeServiceFilesServer interface {
	mustEmbedUnimplementedServiceFilesServer()
}

func RegisterServiceFilesServer(s grpc.ServiceRegistrar, srv ServiceFilesServer) {
	s.RegisterService(&ServiceFiles_ServiceDesc, srv)
}

func _ServiceFiles_ProvideFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProvideFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceFilesServer).ProvideFile(m, &serviceFilesProvideFileServer{stream})
}

type ServiceFiles_ProvideFileServer interface {
	Send(*ProvideFileResponse) error
	grpc.ServerStream
}

type serviceFilesProvideFileServer struct {
	grpc.ServerStream
}

func (x *serviceFilesProvideFileServer) Send(m *ProvideFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceFiles_StoreFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceFilesServer).StoreFile(&serviceFilesStoreFileServer{stream})
}

type ServiceFiles_StoreFileServer interface {
	SendAndClose(*StoreFileResponse) error
	Recv() (*StoreFileRequest, error)
	grpc.ServerStream
}

type serviceFilesStoreFileServer struct {
	grpc.ServerStream
}

func (x *serviceFilesStoreFileServer) SendAndClose(m *StoreFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceFilesStoreFileServer) Recv() (*StoreFileRequest, error) {
	m := new(StoreFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceFiles_ServiceDesc is the grpc.ServiceDesc for ServiceFiles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceFiles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.storage.ServiceFiles",
	HandlerType: (*ServiceFilesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProvideFile",
			Handler:       _ServiceFiles_ProvideFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StoreFile",
			Handler:       _ServiceFiles_StoreFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "storage.proto",
}
