// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceFiles_ProvideFile_FullMethodName = "/proto.storage.ServiceFiles/ProvideFile"
	ServiceFiles_StoreFile_FullMethodName   = "/proto.storage.ServiceFiles/StoreFile"
)

// ServiceFilesClient is the client API for ServiceFiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceFilesClient interface {
	ProvideFile(ctx context.Context, in *ProvideFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProvideFileResponse], error)
	StoreFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StoreFileRequest, StoreFileResponse], error)
}

type serviceFilesClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceFilesClient(cc grpc.ClientConnInterface) ServiceFilesClient {
	return &serviceFilesClient{cc}
}

func (c *serviceFilesClient) ProvideFile(ctx context.Context, in *ProvideFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProvideFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceFiles_ServiceDesc.Streams[0], ServiceFiles_ProvideFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProvideFileRequest, ProvideFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceFiles_ProvideFileClient = grpc.ServerStreamingClient[ProvideFileResponse]

func (c *serviceFilesClient) StoreFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StoreFileRequest, StoreFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceFiles_ServiceDesc.Streams[1], ServiceFiles_StoreFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StoreFileRequest, StoreFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceFiles_StoreFileClient = grpc.ClientStreamingClient[StoreFileRequest, StoreFileResponse]

// ServiceFilesServer is the server API for ServiceFiles service.
// All implementations must embed UnimplementedServiceFilesServer
// for forward compatibility.
type ServiceFilesServer interface {
	ProvideFile(*ProvideFileRequest, grpc.ServerStreamingServer[ProvideFileResponse]) error
	StoreFile(grpc.ClientStreamingServer[StoreFileRequest, StoreFileResponse]) error
	mustEmbedUnimplementedServiceFilesServer()
}

// UnimplementedServiceFilesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceFilesServer struct{}

func (UnimplementedServiceFilesServer) ProvideFile(*ProvideFileRequest, grpc.ServerStreamingServer[ProvideFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProvideFile not implemented")
}
func (UnimplementedServiceFilesServer) StoreFile(grpc.ClientStreamingServer[StoreFileRequest, StoreFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StoreFile not implemented")
}
func (UnimplementedServiceFilesServer) mustEmbedUnimplementedServiceFilesServer() {}
func (UnimplementedServiceFilesServer) testEmbeddedByValue()                      {}

// UnsafeServiceFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceFilesServer will
// result in compilation errors.
type UnsafeServiceFilesServer interface {
	mustEmbedUnimplementedServiceFilesServer()
}

func RegisterServiceFilesServer(s grpc.ServiceRegistrar, srv ServiceFilesServer) {
	// If the following call pancis, it indicates UnimplementedServiceFilesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceFiles_ServiceDesc, srv)
}

func _ServiceFiles_ProvideFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProvideFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceFilesServer).ProvideFile(m, &grpc.GenericServerStream[ProvideFileRequest, ProvideFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceFiles_ProvideFileServer = grpc.ServerStreamingServer[ProvideFileResponse]

func _ServiceFiles_StoreFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceFilesServer).StoreFile(&grpc.GenericServerStream[StoreFileRequest, StoreFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceFiles_StoreFileServer = grpc.ClientStreamingServer[StoreFileRequest, StoreFileResponse]

// ServiceFiles_ServiceDesc is the grpc.ServiceDesc for ServiceFiles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceFiles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.storage.ServiceFiles",
	HandlerType: (*ServiceFilesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProvideFile",
			Handler:       _ServiceFiles_ProvideFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StoreFile",
			Handler:       _ServiceFiles_StoreFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "storage.proto",
}
